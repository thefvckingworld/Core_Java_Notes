java程序基本要素:
  注释/数据类型/变量与常量/运算符/字符串/输入输出/控制流/大数/数组


一个简单的Java程序：

public class FirstSample {
  public static void main(String[] args) {
    System.out.println("We will not use 'Hello, world!'");
  }
}

public 为访问修饰符(用于控制程序的其他部分对这段代码的访问级别) ，Java区分大小写，class为程序逻辑的容器，Java程序的所有逻辑都必须在类中。

class后紧跟类名，取名规则为与C语言同。类名建议使用大驼峰风格。

源代码的文件名必须与公共类的名字相同，并用.java作为扩展名，编译后，得到.class(字节码文件，用于jvm解析)。

代码运行： jvm总是从指定类中的main方法开始运行，main方法必须是public， Java中的任何方法的代码都用{}开始，结束。

一个Java应用程序的格式如下：

public class ClassName {
  public static void main(String[] args) { // 与c++不同，main方法没有OS返回退出码,main结束，自动返回0，未结束，需要调用System.exit来返回其他错误码。
  
  }
}

调用方法的通用语法：
object.method(para); // 就像 System.out.println(); System.out是一个对象, 这里的功能是打印一个空行

字符串：使用双引号进行界定，如"Hello, Java"

注释：
1) // xxx
2) /* xxx */   注：java中这种注释不能嵌套
3) /** xxx */  注：这种注释可用来自动的生成文档

数据类型：
Java中有8种基本类型(4种整型，2种浮点类型，1种字符类型，一种bool型)

4种整型(可以是负数，java没有unsigned这种形式)：
int   4字节
short 2字节
long  8字节
byte  1字节 (不能再用char了)

长整型数值后缀有一个L和l，十六进制数值前缀0x或0X，八进制前缀一个0，如010为八进制，二进制为0b10101，并且为了方便阅读，可以加上下划线，如10_000_000这样。

Byte Integer Long都提供了处理无符号除法，及求余数的方法，就是将-128~127处理成 0~255

浮点类型：
float  4字节 后缀有f/F，无f默认为double
double 8字节 后缀有D/d

浮点数3个特殊的值：
Double.POSITIVE_INFINITY 正无穷
Double.NEGATIVE_INFINITY 负无穷 
Double.Nan 不是一个数字

Nan使用说明: Double.isNaN(x), 不能是 x == Nan

char类型(可表示为十六进制值)：
使用单引号括起来，转移\u, 范围\u0000~\uFFFF，所有转义序列可以出现在单引号中，\u还可以出现在其他地方，如String\u005B\u005d args 为 String[] args

其他转义序列:
\b \t \n \r \" \' \\

转义序列会在解析代码之前得到处理。 // look inside c:\users 这种会产生语法错误

Unicodea(字符编码)和char类型：
 
字符 代码值(码点) 

java不建议使用char类型。

boolean类型： false 和 true 与整型值不可互换。

变量与常量：

Java中可以将声明放在代码中的任何地方。并且与c++不同的是，Java中并不区分声明和定义，声明了就是一块内存。

自动类型推导: var greeting = "Hello";

Java常量：
final double CM_PER_INCH = 2.54; // 常量名通常大写，且只能被赋值一次，最好是初始化的时候

类常量： public static final double PI = 3.1415926; 使用 ClassName.PI;

枚举类型:
enum Size {SMALL, LARGE};
Size s = Size.Small; // 枚举类型变量声明，看成是一种类型，当然值也可以是null

运算符：
算术运算符： = - * / %

整数被0除将产生一个异常，浮点数除0得到无穷大或无穷小

浮点截断： strictfp修饰方法，如果用来修饰类，则类中的所有方法都进行截断

数学函数与常量：
静态方法不处理任何对象。如Math类中，double y = Math.pow(x, a);

Math提供的函数：
sin cos tan atan atan2 exp log log10 PI E

静态导入后import static java.lang.Math.*  则在调用sin时不需要再加上Math前缀了。

数值类型之间的转换。(小的向大的转换一般是合法的) 。
一个二元运算符在运算时，会将两个操作数转换成同一种类型进行运算，向上转换。有double向double，否则有float向float，否则有long向long，否则都向int转换。

强制类型转换(如果高位向低位转换不使用强制类型转换，会报错)：
double x = 9.97;
int nx = (int) x;

结合赋值和运算符： 
int x = 1;
x += 3.5; (x + 3.5) ==> x = (int)(x + 3.5)

自增/自减运算符: 同c++中的含义和用法。针对变量进行使用，不能针对数字。

关系运算符： == != < > <= >= &&(短路求职) ||(短路求职) !(逻辑非) ?: 这些操作符同c++的使用方法。

位运算符：
&(与)  |(或) ^(异或) ~(取反)

使用举例:
int fB = (n & 0b1000);

>>(用符号位填充高位,算术移位) << >>>(用0填充高位，逻辑移位) (移位运算符的右操作数要完成模32的运算，如果左操作数为long,则模64位运算)。 如 1 << 35 为 1 << 32

java除了在for循环的第一和第三部分使用逗号表达式外，其他时候不使用逗号运算符。

字符串:
String类.
方法：  s.substring(a, b); // b为不想复制的第一个位置。 子串长度 b - a
拼接： s = s1 + s2 或者 s = s1 + 5 // 任何非字符串也会转换成字符串对象

不可变字符串(好处是编译器可以共享)： 不能对字符串的某个值进行修改，只能通过拼接的方式或替换引用的方式，这里与C/C++不同。
s = s.substring(0, 3) + "p!"。
s = "help" 重新引用新的字符串。

java中没有指针。

字符串比较:
应当使用equals, 可以是String s.equals(x) 也可以是 "Hello".equals(x); (猜测字符串字面量转换为了String对象)而不能使用==，java中的变量都是引用，都是地址。

空串与Null串。首先要检查不为null，然后检查不为空串，检查空串的方式是s.length() != 0

s.CharAt(index) 可以获得对应的char字符

注意Java中码点和码点单元的区别。码点是一个数字，如6， 码点单元是对应的字符，如'A'

String的一些常用方法
equals equalsIgnore startsWith endsWith length substring toLowerCase toUpperCase trim strip join repeat

构建字符串(避免拼接耗时):
StringBuilder builder = new StringBuilder();
builder.append("sadasd");
builder.append(s);
String completedString = builder.toString(); // 字符串构建完成时，调用toString得到String对象。
StringBuilder的一些重要方法: append, length, insert, setCharAt, delete, toString

输入与输出:
读取输入:
import util.*; // import导入相应的包
Scanner in = new Scanner(System.in); // System.in是标准输入流，System.out是标准输出流，这里将标准输入流与in对象绑定
String name = in.nextLine(); // 从标准输入流读取一行
String word = in.next(); // 读取一个单词
int num = in.nextInt(); // 读取一个整数
还有一些其他的方法，hasNext, hasNextInt, hasNextDouble

格式化输出(这一节重新看)：
System.out.printf("%8.2f", 33.3333);
为printf提供多个参数：
System.out.printf("Hello, %s, Next year, you'll be %d", name, age);
输出8位，不足以空格补齐，.2为小数点后两位， f表示输出浮点，还有%s, %d等。
每一个以%字符开始的格式说明符都用相应的参数替换。格式说明符尾部的转换符指示要格式化的数值的类型。还可以指定控制格式化输出外观的各种标志。
可以使用s转换符格式化任意的对象，对于实现了Formttable接口的对象，调用formatTo方法，否则调用toString方法
逗号标志可以增加分组分隔符，如%,.2f
String s = String.Format(); // 可以通过这种方法来格式化一个字符串

日期与时间的格式化选项：
%tc
参数索引(从1开始，用来指示使用哪个参数，好处是只需要提供一次日期):
System.out.printf("%1$s %2$tB %2$te %2$tY", "Due date", new date());

格式化：% 参数索引 $ flag width . 精度 格式化字符


文件输入与输出：
Scanner in = new Scanner(Path.of("file path"), StandardCharsets.UTF8); // 文件名中的反斜杠要两个进行转义
PrintWriter out = new PrintWriter("file path", StanardCharsets.UTF8);
这样，后续就和前面的读取和输出是一模一样的了。

当然这些可能会抛出异常，
需要能够在方法中标记，不然会程序停止。
public static void main(String[] args) throws IOException
{
  Scanner in = new Scanner(Path.of("file path"), StandardCharsets.UTF_8);
}

控制流程(由条件语句和循环结构确定)： // 基本与C++类似，只不过没有goto语句，但break语句可以带标签进行内存循环跳出。

块作用域(其中的变量的声明周期在这里面,在Java中，内层块的变量定义不允许与外层重名): 
{
}

条件语句(同c++):
if (condition) {

} else if (condition){

} else {

}

循环(同c++)：
while (statement) {

}

do {

} while (statement);

for (int i = 1; i <= 10; i++) {  // 比较里要主要浮点数的比较，有可能达不到精度值。 如 for (double x = 0; x != 10; x += 0.1)

}

多重选择(同c++)：
//如果没有break,又不想报告警，可以在外围方法前加上注解@SuppressWarnings("fallthrough")
switch (num) {
  case 1:   // 可以是int char byte short 枚举常量，字符串
    ...
    break;
  case 2:   // 如果是枚举常量，没有必要Size.SMALL这种，可以直接SMALL，Java会自动推导。
    ...
    break;
  default:
    ...
    break;
}

中断控制流程的语句(同c++)：
break continue

带标签的break, 类似goto,可以进行跳出。标签需要带上冒号。// 但是break只能循环或者if中使用,并且只能往前跳。跳出希望跳出的循环。
带标签的continue，同上。

大数(处理任意长度数字序列)：
import java.math.BigInteger; // 实现任意长度
import java.math.BigDecimal; // 实现任意精度

静态方法，将int装换为大数
BigInteger a = BigInteger.valueOf(100);

更大的数构造：
BigInteger a = new BigInteger("5641321231324564654654132");

大数常量： BigInterger.ZERO BigInteger.ONE BigInteger.TEN BigInteger.TWO

大数运算：
BigInteger c = a.add(b); // c = a + b
BigInteger d = c.multiply(b.add(BigInteger.valueOf(2))) // d = c * (b + 2)

比较，使用compareTo(other) 大于other 返回正数, 小于，返回负数，等于，返回0

java没有运算符重载。

数组(存储相同类型值的序列)：
声明数组：
int[] a; //  类型 [](代表数组) 数组名，但是这样仅仅是一个变量a，还不是真正的数组，a还是只是个引用
int[] a = new int[n];
int[] a = {1, 2, 3, 4, 5, 6, 7};
int[] a = new int[] {1, 2, 3, 4, 5}; // 匿名数组初始化,这种形式就可以重新初始化一个数组了，即重新给a进行赋值。
数字数组，自动初始化为0， boolean为false，对象数字为null
获取数组个数：
a.length;

for-each循环:
for (variable : collection) { // collection必须是一个数组或是一个实现了Iterable接口的类对象，例如ArratList

} 

打印数组:
Arrays.toString(a);

数组拷贝：
int[] luckyNumbers = smallPrimes; // 这种形式为浅拷贝，两个变量将引用同一个数组。

int[] luckyNumbres = Arrays.copyOf(smallPrimes, 2 * smallPrimes.length) // 这种形式为深拷贝，length为新数组长度

数组排序:
int[] a = new int[100];
Arrays.sort(a); // 快排

Math.random() 返回一个随机浮点数。

多维数组申明：
二维数组：
double[][] b = new double[n][m];
double[][] b = {
    {1, 2},
    {1, 2}
  };

需要两个for-each才能遍历二维数组

另外，二维数组下，也可以对行进行交换：
double[] temp = b[i];
b[i] = b[j];
b[j] = temp;

不规则数组(为每一行分配个数)：
int[][] c = new int[ROW_MAX][];

for (int row = 0; row < c.length; row++) { // c.length返回c的行数。
  c[row] = new int[xx];
}

其实，综上所述，java下数组名就是c++下的指针，在java下是一个引用，可以单独去使用。

// TODO: 写个程序把这些元素串联起来，并且重新整理这里的笔记，这个2022/5/28晚要完成。
