对象与类基本要素：
面向对象程序设计概述/预定义类/自定义类/静态字段与静态方法/方法参数/对象构造/包/JAR文件/文档注释/类设计技巧

面向对象设计概述：
类：
类是构造对象的模板或蓝图，由类构造对象的过程称为创建类的实例。且类可扩展，称为继承。

对象(三个特性：行为，状态，标识)

识别类： 分析问题的过程中寻找名词，而方法对应着动词。

类之间的关系：(依赖(use a)，聚合(has a)，继承(is a))

使用预定义类。
使用类构造器构造新实例，构造器名字与类名相同，构造新实例，在构造器前面加上new 如: new Date();
Date birthday = new Date();
变量birthday不是一个对象，而是一个引用，是一个对象变量，就算引用了，也不是一个对象，new返回的也是一个引用。这里实际就相当于c++的指针。

birthday = null; //显示的设置为null

用户自定义类 简单形式：
class ClassName {
  field1
  field2
  ...
  constructor1
  constructor2
  ...
  method1
  method2
}

在一个源文件中，只能有一个公共类，其他类可以不带访问修饰符，默认私有，且可以有任意多个。不过一般来讲，一个源文件，一个类。

构造器总是结合new运算符使用，构造方法不能单独调用。
构造器与类同名，构造器没有返回值，且与new一起使用，其他同函数方法。

所有的java对象都是在堆中构造的。函数内部同名的局部变量会遮蔽更外层的变量。

自动类型推导，var只能用于方法中的局部变量，如 var harry = new Employee();

使用null引用，宽松方式，自己搞，严格方式，Objects.requireNonNull(n, "The name cannot be null.");

隐式参数与显式参数：隐式参数就是this,对象本身，显式参数就不用说了。

在Java中，所有的方法都必须在类中定义，且无内联的概念，那是jvm的任务。

字段访问器：getxxx()  用来返回字段值

基于类的访问权限：一个类的方法可以访问该类任意对象的私有字段，这是合法的，如：
class Employee {
  private String name;
  public boolean equals(Employee other) {
    return this.name.equals(other.name);
  }
}

私有方法：将Public 改成 private;

final实例字段: 如
class Employee {
  private final String name; // 这样的字段必须在构造对象中初始化，即在构造器中初始化。
}

final String name; // 表示name不会再改变其引用对象。

静态字段: static，每个类都只有一个这样的字段，属于类，而非对象，非静态的每个对象都会有一个副本。访问： CLASS.staticVariable;

静态常量：public static final

静态方法：不在对象上执行的方法，无隐式参数，即不能访问非静态字段，只能访问静态字段。当然，对象也可以调用静态方法。

工厂方法：LocalDate和NumberFormat的类使用静态工厂方法来构造对象，主要两个原因：无法命名构造器，以及，使用构造器时，无法改变所构造对象的类型。

调用静态方法，不需要任何对象，如Math.pow直接调用。

main也是个静态方法：
public class Application {
  public static void main(String[] args) {
  
  }
}

main方法不对任何对象进行操作，在启动程序时还没有任何对象。静态的main方法将执行并构造程序所需要的对象

测试技巧：在类中加入main方法，即可执行逻辑，若类属于更大部分的类，这个main函数也不会被执行。 

方法参数：
  按值调用：基本数据类型
  按引用调用：对象引用(本质还是传值调用，引用就相当于是个地址，传引用就相当于传了个地址，关于这一点深层的理解和c++中的一样)
 
  方法不能修改基本数据类型的参数。
  方法可以改变对象参数的状态。
  方法不能让一个对象参数引用一个新的对象。
  
 对象构造：
  1.重载(方法签名必须不同，方法签名指的是方法名及参数类型)
  2.默认字段初始化(数值为0，布尔值为false，对象引用为null)(这个和局部变量不同，局部变量不会自动初始化，是个随机值，这里是类中的数据成员)
  3.无参数的构造器(可以自己提供，但是如果自己没有写任何的构造器，编译器会自动生成一个无参数构造器，将所有实例字段设置为默认值)
  4.显示字段初始化(在类定义中直接为任何字段赋值, 也可以使用静态方法进行赋值，实际测试后，非静态方法也可以)
  5.参数名(aName 或者通过this访问)
  6.调用另一个构造器: this(para1, para2); this引用实际就相当于一个地址。
  7.初始化块：在类的声明中，可以包含任意多个代码块，只要构造这个类的对象，这些块就会被执行。初始化块先于构造器被运行，就是先运行初始化块， 再运行构造器。并且初始化块放在字段之后。
    class E {
      private int id;
      private String name;
      private double salray;
      
      {
        id = 4;
        name = "Tome";
      }
    }
    
    由于实例字段有多种初始化方式，所以下面列出调用构造器的具体处理步骤：
      1.如果构造器的第一行调用了另一个构造器，则基于所提供的参数执行第二个构造器。
      2.否则
        所有数据初始化
        按照在类声明中出现的顺序，执行所有字段初始化方法和初始化块。
      3.执行构造器的主题代码

静态初始化块(针对静态字段,静态字段使用静态初始化块，非静态的使用对象初始化块)：
  static {
  
  }


import java.util.Random()  // 构造一个新的随机数生成器。使用哦哦个：new Random().nextInt(10000);
import java.util.nextInt() // 0~n-1之间的随机数。

对象析构：
  java不支持，有自动垃圾回收，可以提供一个close方法，手动调用，后续章节介绍自动调用这个close方法。
  如果可以等到jvm退出，可以使用方法Runtime.addShutdoneHook()注册一个钩子，在退出时调用这个方法。
  
包(使用包将类组织在一个集合中，主要原因是为了确保类名的唯一性)：
  包实际就是一个文件夹，从编译器的角度来看，嵌套的包之间没有任何关系。例如：java.util与java.util.jar包毫无关系。
  
 类的导入：
  一个类可以使用所属包中的所有类，一起其他包中的公共类。
  import java.time.*; // 如果没有这句话，就需要这么写  java.time.LocalDate today = java.time.LocalDate.now();

静态导入：
  import static java.lang.System; // 导入静态方法和静态字段，比如System
  导入特定的方法: import static Math;
  
在包中增加类：
  package como.horstmann.corejava;  // 如果没有包名，则为无名包。包名与目录相对应，如果不对应，虚拟机就找不到类
  看到程序清单4.6;
  










































